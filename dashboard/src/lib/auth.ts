class Auth {
  allPermissions: any = {};
  grantedPermissions: any = {};
  tokenCookieName: string = "Abp.AuthToken";
  /* AUTHORIZATION **********************************************/
  // implements Authorization API that simplifies usage of authorization scripts generated by Abp.

  init = (a: Array<any>, b: Array<any>) => {
    this.allPermissions = {};
    this.grantedPermissions = {};
    a.forEach(e => {
      this.allPermissions[e] = true;
    });
    b.forEach(e => {
      this.grantedPermissions[e] = true;
    });
  }
  // deprecated. Use abp.auth.isGranted instead.
  hasPermission = (permissionName: string) => {
    return this.isGranted(permissionName);
  }

  // deprecated. Use abp.auth.isAnyGranted instead.
  hasAnyOfPermissions = (...argus: string[]) => {
    if (!argus || argus.length <= 0) {
      return true;
    }
    for (var i: number = 0; i < argus.length; i++) {
      if (this.isGranted(argus[i])) {
        return true;
      }
    }
    return false;
  }
  // deprecated. Use abp.auth.areAllGranted instead.
  hasAllOfPermissions = (...argus: string[]) => {
    if (!argus || argus.length <= 0) {
      return true;
    }

    for (var i: number = 0; i < argus.length; i++) {
      if (!this.isGranted(argus[i])) {
        return false;
      }
    }
    return true;
  }
  isGranted = (permissionName: string) => {
    return (
      this.allPermissions[permissionName] !== undefined &&
      this.grantedPermissions[permissionName] !== undefined
    );
  }
  isAnyGranted = (...argus: string[]) => {
    if (!argus || argus.length <= 0) {
      return true;
    }
    for (var i: number = 0; i < argus.length; i++) {
      if (this.isGranted(argus[i])) {
        return true;
      }
    }
    return false;
  }
  areAllGranted = (...argus: string[]) => {
    if (!argus || argus.length <= 0) {
      return true;
    }

    for (var i: number = 0; i < argus.length; i++) {
      if (!this.isGranted(argus[i])) {
        return false;
      }
    }
    return true;
  }
  setToken = (authToken: string = "", expireDate: any = null) => {
    this.setCookieValue(this.tokenCookieName, authToken, expireDate, "/", "");
  }
  getToken = () => {
    return this.getCookieValue(this.tokenCookieName);
  }
  clearToken = () => {
    this.setToken();
  }
  /**
   * Gets a cookie with given key.
   * This is a simple implementation created to be used by ABP.
   * Please use a complete cookie library if you need.
   * @param {string} key
   * @returns {string} Cookie value or null
   */
  getCookieValue(key: String = "Abp.AuthToken"): string {
    var equalities: Array<any> = document.cookie.split("; ");
    for (var i: number = 0; i < equalities.length; i++) {
      if (!equalities[i]) {
        continue;
      }
      var splitted: Array<any> = equalities[i].split("=");
      if (splitted.length !== 2) {
        continue;
      }
      if (decodeURIComponent(splitted[0]) === key) {
        return decodeURIComponent(splitted[1] || "");
      }
    }
    return null;
  }

  /**
   * Sets a cookie value for given key.
   * This is a simple implementation created to be used by ABP.
   * Please use a complete cookie library if you need.
   * @param {string} key
   * @param {string} value
   * @param {Date} expireDate (optional). If not specified the cookie will expire at the end of session.
   * @param {string} path (optional)
   */
  setCookieValue(
    key: string,
    value: string,
    expireDate: Date,
    path: String,
    domain: String
  ): void {
    var cookieValue: string = encodeURIComponent(key) + "=";
    if (value) {
      cookieValue = cookieValue + encodeURIComponent(value);
    }
    if (expireDate) {
      cookieValue = cookieValue + "; expires=" + expireDate.toUTCString();
    }

    if (path) {
      cookieValue = cookieValue + "; path=" + path;
    }
    if (domain) {
      cookieValue = cookieValue + "; domain=" + domain;
    }

    document.cookie = cookieValue;
  }
}
const util: Auth = new Auth();
export default util;
